{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, inject, onMounted, toRaw, watch } from 'vue';\nimport { Network } from 'vis-network/standalone';\nimport { DataSet } from 'vis-data';\nimport { store } from '../data/store.js';\nexport default {\n  __name: 'SequenceGraph',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const eventBus = inject('eventBus');\n    const container = ref(null);\n    let network = null;\n    let selectedNode = null;\n    const graphResize = () => {\n      if (container.value) {\n        container.value.style.height = `${window.innerHeight - 169}px`;\n      }\n    };\n    onMounted(() => {\n      graphResize();\n      window.addEventListener('resize', graphResize);\n      const nodes = new DataSet([]);\n      const edges = new DataSet([]);\n      const options = {\n        nodes: {\n          shape: 'dot',\n          size: 25,\n          color: {\n            background: '#2d2d2d',\n            border: 'grey',\n            highlight: {\n              background: '#2d2d2d',\n              border: 'white'\n            }\n          },\n          font: {\n            size: 14,\n            color: 'white'\n          }\n        },\n        edges: {\n          color: 'white',\n          arrows: {\n            to: {\n              enabled: true,\n              scaleFactor: 0.5\n            }\n          }\n        }\n      };\n      const data = {\n        nodes: nodes,\n        edges: edges\n      };\n      network = new Network(container.value, data, options);\n      watch(() => store.sequences, () => {\n        console.log(data.nodes);\n        data.nodes = new DataSet(Object.keys(store.sequences).map(key => ({\n          id: store.sequences[key].id,\n          label: store.sequences[key].name\n        })));\n        data.edges = new DataSet(Object.keys(store.sequences).flatMap(key => store.sequences[key].precedents.map(precedent => ({\n          from: precedent,\n          to: store.sequences[key].id\n        }))));\n        network.setData(data);\n      });\n      network.on('click', params => {\n        if (params.nodes.length === 1) {\n          let clickedNode = params.nodes[0];\n          if (selectedNode) {\n            var sequence = store.sequences[clickedNode];\n            if (!sequence.precedents.includes(selectedNode)) {\n              sequence.precedents.push(selectedNode);\n              eventBus.emit(\"save-sequence\", toRaw(sequence));\n            }\n            selectedNode = null;\n            network.unselectAll();\n          } else {\n            selectedNode = clickedNode;\n          }\n        } else {\n          selectedNode = null;\n        }\n      });\n    });\n    const __returned__ = {\n      eventBus,\n      container,\n      get network() {\n        return network;\n      },\n      set network(v) {\n        network = v;\n      },\n      get selectedNode() {\n        return selectedNode;\n      },\n      set selectedNode(v) {\n        selectedNode = v;\n      },\n      graphResize,\n      ref,\n      inject,\n      onMounted,\n      toRaw,\n      watch,\n      get Network() {\n        return Network;\n      },\n      get DataSet() {\n        return DataSet;\n      },\n      get store() {\n        return store;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","inject","onMounted","toRaw","watch","Network","DataSet","store","eventBus","container","network","selectedNode","graphResize","value","style","height","window","innerHeight","addEventListener","nodes","edges","options","shape","size","color","background","border","highlight","font","arrows","to","enabled","scaleFactor","data","sequences","console","log","Object","keys","map","key","id","label","name","flatMap","precedents","precedent","from","setData","on","params","length","clickedNode","sequence","includes","push","emit","unselectAll"],"sources":["/home/irm/Dev/Go/ui-test-manager/ui-test/web/src/components/SequenceGraph.vue"],"sourcesContent":["<template>\n    <v-card style=\"height: 100%\">\n      <v-card-text>\n        <div ref=\"container\" style=\"border: 2px solid #333333\"></div>\n      </v-card-text>\n    </v-card>\n</template>\n\n<script setup>\nimport { ref, inject, onMounted, toRaw, watch } from 'vue';\nimport { Network } from 'vis-network/standalone';\nimport { DataSet } from 'vis-data';\nimport { store } from '../data/store.js'\n\nconst eventBus = inject('eventBus');\nconst container = ref(null);\nlet network = null;\nlet selectedNode = null\n\nconst graphResize = () => {\n  if (container.value) {\n    container.value.style.height = `${window.innerHeight - 169}px`;\n  }\n};\n\nonMounted(() => {\n\n  graphResize();\n  window.addEventListener('resize', graphResize);\n  const nodes = new DataSet([]);\n\n  const edges = new DataSet([]);\n\n  const options = {\n    nodes: {\n      shape: 'dot',\n      size: 25,\n      color: {\n        background: '#2d2d2d',\n        border: 'grey',\n        highlight: {\n          background: '#2d2d2d',\n          border: 'white',\n        }\n      },\n      font: {\n        size: 14,\n        color: 'white',\n      },\n    },\n    edges: {\n      color: 'white',\n      arrows: {\n        to: {\n          enabled: true,\n          scaleFactor: 0.5\n        }\n      }\n    }\n  };\n\n  const data = {\n    nodes: nodes,\n    edges: edges,\n  };\n  network = new Network(container.value, data, options);\n\n  watch(() => store.sequences, () => {\n    console.log(data.nodes)\n    data.nodes = new DataSet(Object.keys(store.sequences).map((key) => ({ id: store.sequences[key].id, label: store.sequences[key].name })));\n    data.edges = new DataSet(Object.keys(store.sequences).flatMap((key) =>\n      store.sequences[key].precedents.map((precedent) => ({ from: precedent, to: store.sequences[key].id }))\n    ))\n    network.setData(data)\n  });\n\n  network.on('click', (params) => {\n    if (params.nodes.length === 1) {\n      let clickedNode = params.nodes[0];\n      if (selectedNode) {\n        var sequence = store.sequences[clickedNode]\n        if (!sequence.precedents.includes(selectedNode)) {\n          sequence.precedents.push(selectedNode)\n          eventBus.emit(\"save-sequence\", toRaw(sequence));\n        }\n        selectedNode = null\n        network.unselectAll()\n      } else {\n        selectedNode = clickedNode;\n      }\n    } else {\n      selectedNode = null\n    }\n  });\n\n});\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}