{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"container\",\n  style: {\n    \"border\": \"2px solid #333333\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  return _openBlock(), _createBlock(_component_v_card, {\n    style: {\n      \"height\": \"100%\"\n    }\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_card_text, null, {\n      default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */)]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["ref","style","_createBlock","_component_v_card","_createVNode","_component_v_card_text","_createElementVNode","_hoisted_1"],"sources":["/home/irm/Dev/Go/ui-test-manager/ui-test/web/src/components/SequenceGraph.vue"],"sourcesContent":["<template>\n    <v-card style=\"height: 100%\">\n      <v-card-text>\n        <div ref=\"container\" style=\"border: 2px solid #333333\"></div>\n      </v-card-text>\n    </v-card>\n</template>\n\n<script setup>\nimport { ref, inject, onMounted, toRaw, watch } from 'vue';\nimport { Network } from 'vis-network/standalone';\nimport { DataSet } from 'vis-data';\nimport { store } from '../data/store.js'\n\nconst eventBus = inject('eventBus');\nconst container = ref(null);\nlet network = null;\nlet selectedNode = null\n\nconst graphResize = () => {\n  if (container.value) {\n    container.value.style.height = `${window.innerHeight - 169}px`;\n  }\n};\n\nonMounted(() => {\n\n  graphResize();\n  window.addEventListener('resize', graphResize);\n  const nodes = new DataSet([]);\n\n  const edges = new DataSet([]);\n\n  const options = {\n    nodes: {\n      shape: 'dot',\n      size: 25,\n      color: {\n        background: '#2d2d2d',\n        border: 'grey',\n        highlight: {\n          background: '#2d2d2d',\n          border: 'white',\n        }\n      },\n      font: {\n        size: 14,\n        color: 'white',\n      },\n    },\n    edges: {\n      color: 'white',\n      arrows: {\n        to: {\n          enabled: true,\n          scaleFactor: 0.5\n        }\n      }\n    }\n  };\n\n  const data = {\n    nodes: nodes,\n    edges: edges,\n  };\n  network = new Network(container.value, data, options);\n\n  watch(() => store.sequences, () => {\n    console.log(data.nodes)\n    data.nodes = new DataSet(Object.keys(store.sequences).map((key) => ({ id: store.sequences[key].id, label: store.sequences[key].name })));\n    data.edges = new DataSet(Object.keys(store.sequences).flatMap((key) =>\n      store.sequences[key].precedents.map((precedent) => ({ from: precedent, to: store.sequences[key].id }))\n    ))\n    network.setData(data)\n  });\n\n  network.on('click', (params) => {\n    if (params.nodes.length === 1) {\n      let clickedNode = params.nodes[0];\n      if (selectedNode) {\n        var sequence = store.sequences[clickedNode]\n        if (!sequence.precedents.includes(selectedNode)) {\n          sequence.precedents.push(selectedNode)\n          eventBus.emit(\"save-sequence\", toRaw(sequence));\n        }\n        selectedNode = null\n        network.unselectAll()\n      } else {\n        selectedNode = clickedNode;\n      }\n    } else {\n      selectedNode = null\n    }\n  });\n\n});\n</script>"],"mappings":";;EAGaA,GAAG,EAAC,WAAW;EAACC,KAAiC,EAAjC;IAAA;EAAA;;;;;uBAFzBC,YAAA,CAISC,iBAAA;IAJDF,KAAoB,EAApB;MAAA;IAAA;EAAoB;sBAC1B,MAEc,CAFdG,YAAA,CAEcC,sBAAA;wBADZ,MAA6D,CAA7DC,mBAAA,CAA6D,OAA7DC,UAA6D,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}